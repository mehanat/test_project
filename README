Приложение реализовано на платформе Spring, доступ к базе с помощью Hibernate.
Список методов:

/list - возвращает список пользователей из базы
/get/{userId} - возвращает конкретного пользователя по его id
/delete/{userId} - удаляет пользователя по его id
/add - добавляет нового пользователя. Принимиает на вход json объект:

{
	"name":"UserName",
	"login":"UserLogin",
	"password":"Password",
	"roles":[
	    {
	        "id":"roleId",
	        "name":"roleName"
	    }
	]
}

/edit - редактирует пользователя. Принимиает на вход json объект:

{
	"name":"UserName",
	"login":"UserLogin",
	"password":"Password",
	"roles":[
	    {
	        "id":"roleId",
	        "name":"roleName"
	    }
	]
}

Методы /add и /edit валидируют приходящего юзера: проверяют, что поля логина, имени и пароля заполнены,
а пароль имеет хотя бы одну заглавную букву и цифру. Если при валидации обнаружна ошибка: возвращается список сообщений и код возврата.

Насколько я понял, структуру базы данных менять нельзя, поэтому возникли небольшие проблемы:
- таблица user_roles содержит столбец id, поэтому нельзя пометить user и roles аннотацией ManyToMany, т к хибернейт не генерирует id для user_roles.
В связи с этим, пришлось создавать отдельную сущность UserRoles и сохранять отношения юзеров и ролей вручную.
- ссылка на юзера в таблице user_roles помечена как ON UPDATE NO ACTION ON DELETE NO ACTION, поэтому при дедактировании ролей юзера и при удалении
юзера отношения из этой таблицы также пришлось удалять вручную.

